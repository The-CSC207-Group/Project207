Query

Query in this context:
- Query is a generic class with two special methods, "returnFirstMeetingCondition"
and "returnAllMeetingCondition" method which allows us to specify a
generic database to query from as well as Conditions that must be met
to return a specific object within the database.

Instantiating a Query Object:
- When instantiating a Query Object, we must substitute the generic "T"
with the Type of the database we are requesting data from. For example,
to query from the database of Appointments we would do the following:
"Query<Appointment> query = new Query<>()".

Using "returnAllMeetingCondition":
- A query object contains this instance method which allows us to obtain all objects meeting the conditions
we provide it from the database as an ArrayList of the type specified when instantiating the object. To call
the method, we must provide two arguments, the first being a DataMapperGateway matching the type specified when
instantiating the query object and the second being an arraylist of QueryCondition objects.The method
call would look like this: query.returnAllMeetingCondition(appointmentDatabase, <some arraylist of QueryConditions>).

Using Query Conditions:
- To use a pre-defined query condition, the type of the object being queried must match the type specified by the
generic subclass of QueryCondition. To find what type can be queried using a QueryCondition subclass, look next to the
class name in the class definition. Ex: in NoteQueryConditions the class IsUsersNote specifies that the generic
type T must extend the Note object. The object must be initialized with the data specified in the constructor.
Once the query condition object is created with the relevant data, it must be added to an ArrayList of type
QueryCondition to be passed into a call to "returnAllMeetingCondition". Ex: see getLogsByUserId in the LogManager class.
Note: desiredStatus is specified to tell java whether you want the condition to be true or false. True if you want
the condition to be true, false otherwise.

Creating Query Conditions:
- A query condition is essentially a class that has an "isTrue" method that can be used to check if an object "item"
meets a condition. Sometimes checking a condition requires data such as "userId" etc. to work and the Query Object
can not access the data with the isTrue method alone. To combat this, we define instance attributes which are assigned on
initialization. Note that since each QueryCondition subclass specifies that isTrue takes in a generic typed object, if
you want to use specific methods or access attributes from the entity being tested, you need to specify that the generic
type extends some class. Adding "<T extends SomeEntity>" beside the class name in the declaration of a QueryCondition
subclass tells us that the entity passed into isTrue can be of type SomeEntity or a subclass of it, allowing us to access
attributes of SomeEntity.
- IMPORTANT: When creating a query class, we want this query to be applicable to objects as high up on the inheritance
hierarchy as possible. For example, if a condition applies to both note and prescription entities (where prescription in-
herits from note), we want to specify that any object of type note can be checked to see if it meets the condition
specified.

Template for Creating QueryCondition Subclass:
- Ex Class Declaration: public class HasUserId<T extends User> extends QueryCondition<T>.
In stating T extends User, we have access to User getters to check if some condition we define is True in the
isTrue method. Further the class must extend QueryCondition<T>.
- The constructor and instance attributes of the subclass are meant for providing data needed in isTrue. This data
would be passed to the query condition on initialization.
- IsTrue takes in a generic object of type T (this object would be a single entity object in the database) and returns
a boolean to tell the query whether the object adheres to the condition and whether to include it in the ArrayList
of returned items. For context, to find all objects adhering to a condition in a database, the query passes each object
from the database into the isTrue method of each QueryCondition.

Examples:
- Uses: PrescriptionManager -> getPatientAllPrescriptionDataByUserId
- Definitions: NoteQueryConditions -> IsUsersNote
- How Querying is Implemented: Check out the Query class to see how that works.






